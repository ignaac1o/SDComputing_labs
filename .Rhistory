a=1
b=1
#prior
prior=function(thetha) dbeta(theta,a,b)
#posterior
posterior=function(thetha) dbeta(theta,y+a,n-y+b)
theta=seq(0,1,length(100))
plot(theta,posterior(theta),type="l")
lines(theta,prior(theta),color="red")
theta=seq(0,1,length(100))
plot(theta,posterior(theta),type="l")
lines(theta,prior(theta),col="red")
#plot
theta=seq(0,1,length(100))
plot(theta,posterior(theta),type="l")
a=1
b=1
y=0
n=20
#prior
prior=function(thetha) dbeta(theta,a,b)
#posterior
posterior=function(thetha) dbeta(theta,y+a,n-y+b)
#plot
theta=seq(0,1,length(100))
plot(theta,posterior(theta),type="l")
lines(theta,prior(theta),col="red")
qbeta(c(0.025,0.975),a+y,n-y+b)
lines(thehta,l(thetha),col="black")
lines(theta,l(thetha),col="black")
theta=seq(0,1,length(100))
plot(theta,posterior(theta),type="l")
lines(theta,prior(theta),col="red")
qbeta(c(0.025,0.975),a+y,n-y+b)
l=function(thetha) 0.012
lines(theta,l(thetha),col="black")
lines(l(thetha),col="black")
l(theta)
lines(1:6,l(thetha),col="black")
l=function(thetha) rep(0.012,6)
lines(1:6,l(thetha),col="black")
lines(y=1:6,x=l(thetha),col="black")
l=function(thetha) rep(0.012,100)
lines(y=1:100,x=l(thetha),col="black")
l=function(thetha) rep(0.012,20)
lines(y=1:100,x=l(thetha),col="black")
qbeta(c(0.025,0.975),a+y,n-y+b)
l=function(thetha) rep(0.012,20)
lines(y=1:20,x=l(thetha),col="black")
qbeta(c(0.025,0.975),a+y,n-y+b)
l=function(thetha) rep(0.012,posterior(0.012])
l2=function(thetha) rep(0.1610,20)
lines(y=1:20,x=l(thetha),col="black")
lines(y=1:50,x=l(thetha),col="black")
lines(y=1:posterior(0.012),x=l(thetha),col="black")
l=function(thetha) rep(0.012,posterior(0.012])
l2=function(thetha) rep(0.1610,50)
lines(y=1:posterior(0.012),x=l(thetha),col="black")
lines(y=1:50,x=l(thetha),col="black")
l
l2
l(thetha = )
posterior(0.012)
posterior(0.012)[1]
l=function(thetha) rep(0.012,posterior(0.012)[1])
lines(y=1:posterior(0.012)[1],x=l(thetha),col="black")
qbeta(c(0.025,0.975),a+y,n-y+b)
l=function(thetha) rep(0.012,posterior(0.012)[1])
l2=function(thetha) rep(0.1610,posterior(0.161)[1])
lines(y=1:posterior(0.012)[1],x=l(thetha),col="black")
lines(y=1:posterior(0.161)[1],x=l(thetha),col="black")
theta=seq(0,1,length=100)
plot(theta,posterior(theta),type="l")
lines(theta,prior(theta),col="red")
qbeta(c(0.025,0.975),a+y,n-y+b)
l=function(thetha) rep(0.012,posterior(0.012)[1])
l2=function(thetha) rep(0.1610,posterior(0.161)[1])
lines(y=1:posterior(0.012)[1],x=l(thetha),col="black")
lines(y=1:posterior(0.161)[1],x=l(thetha),col="black")
qbeta(c(0.025,0.975),a+y,n-y+b)
l=function(thetha) rep(0.012,posterior(0.012)[1])
l2=function(thetha) rep(0.1610,posterior(0.161)[1])
lines(y=1:posterior(0.012)[1],x=l(thetha),col="black")
lines(y=1:posterior(0.161)[1],x=l2(thetha),col="black")
posterior(0.161)[1]
theta
x=qbeta(c(0.025,0.975),a+y,n-y+b)
x
segments(x[0],posterior[x[0]])
segments(x0=x[0],y0=posterior[x[0]],x=x[1],y=posterior(x[1]))
segments(x0=x[0],y0=posterior(x[0]),x=x[1],y=posterior(x[1]))
segments(x0=x[0],y0=0,x=x[1],y=posterior(x[1]))
x[0]
x[1]
segments(x0=x[1],y0=0,x=x[2],y=posterior(x[1]))
theta=seq(0,1,length=100)
plot(theta,posterior(theta),type="l")
lines(theta,prior(theta),col="red")
segments(x0=x[1],y0=0,x=x[2],y=posterior(x[1]))
segments(x0=x[1],y0=0,x=x[1],y=posterior(x[1]))
theta=seq(0,1,length=100)
plot(theta,posterior(theta),type="l")
lines(theta,prior(theta),col="red")
segments(x0=x[1],y0=0,x=x[1],y=posterior(x[1]))
segments(x0=x[2],y0=0,x=x[2],y=posterior(x[2]))
segments(x0=x[2],y0=0,x1=x[2],y1=posterior(x[2]))
posterior(x[2])
posterior(x[2])
x[2]
posterior(x[1])
posterior[x[2]]
x[1]
segments(x0=x[1],y0=0,x1=x[1],y1=posterior(x[1]))
segments(x0=x[2],y0=0,x1=x[2],y1=posterior[x[2]])
plot(theta,posterior(theta),type="l")
lines(theta,prior(theta),col="red")
segments(x0=x[1],y0=0,x1=x[1],y1=posterior(x[1]))
segments(x0=x[2],y0=0,x1=x[2],y1=posterior(x[2]))
posterior(x[1])
dbeta(x[2],y+a,n-y+b)
prior=function(thetha) dbeta(theta,a,b)
#posterior
posterior=function(thetha) dbeta(theta,y+a,n-y+b)
theta=seq(0,1,length=100)
plot(theta,posterior(theta),type="l")
lines(theta,prior(theta),col="red")
segments(x0=x[1],y0=0,x1=x[1],y1=posterior(x[1]))
segments(x0=x[2],y0=0,x1=x[2],y1=posterior(x[2]))
posterior(x[1])
x[1]
a=1
b=1
y=0
n=20
#prior
prior=function(thetha) dbeta(theta,a,b)
#posterior
posterior=function(thetha) dbeta(theta,y+a,n-y+b)
theta=seq(0,1,length=100)
plot(theta,posterior(theta),type="l")
lines(theta,prior(theta),col="red")
x=qbeta(c(0.025,0.975),a+y,n-y+b)
segments(x0=x[1],y0=0,x1=x[1],y1=posterior(x[1]))
segments(x0=x[2],y0=0,x1=x[2],y1=posterior(x[2]))
prior(0.02)
dbeta?
prior(0.3)
library(stats)
#prior
prior=function(thetha) dbeta(theta,a,b)
stats::prior(0.3)
stats::dbeta(0.3)
stats::dbeta(0.3,a,b)
prior(0.3)
?rno1mix::MarronWand
?no11mix::MarronWand
?nor1mix::MarronWand
?norlmix::MarronWand
install.packages("nor1mix")
?norlmix::MarronWand
?nor1mix::MarronWand
plot(rnorm(100))
density(rnorm(100))
plot(density(rnorm(100)))
b=seq(min(samp),max(samp),by=0.1)
samp=rnorm(100)
b=seq(min(samp),max(samp),by=0.1)
h2o.init()
library(h2o)
h2o.init()
h2o.no_progress() # Turn off progress bars for notebook readability
n_reg <- 1e4
p_reg <- 10
set.seed(12313)
x_reg <- matrix(rnorm(p_reg * n_reg), nrow = n_reg, ncol = p_reg)
beta_reg <- seq(-5, 5, l = p_reg)
beta_reg <- sign(beta_reg) * beta_reg^2
y_reg <- x_reg %*% beta_reg + rnorm(n_reg)
data_reg <- data.frame("y" = y_reg, "x" = x_reg)
# Visualize relations of Y with (X1, ..., Xp)
pairs(data_reg, horInd = 1, verInd = 2:(p_reg / 2 + 1), pch = 16, cex = 0.1)
# Visualize relations of Y with (X1, ..., Xp)
pairs(data_reg, horInd = 1, verInd = 2:(p_reg / 2 + 1), pch = 16, cex = 0.1)
pairs(data_reg, horInd = 1, verInd = (p_reg / 2 + 2):(p_reg + 1), pch = 16, cex = 0.1)
data_reg <- as.h2o(data_reg)
# Data summary -- perhaps too verbose
h2o.describe(data_reg)
# Data head
h2o.head(data_reg)
# Split into train (80%) and test (20%)
splits_reg <- h2o.splitFrame(data = data_reg, ratios = 0.8, seed = 42)
train_reg <- splits_reg[[1]]
test_reg <- splits_reg[[2]]
resp_reg <- "y"
pred_reg <- setdiff(names(train_reg), resp_reg)
# Run AutoML with the default models and no verbosity (for notebook readability!)
aml_reg <- h2o.automl(x = pred_reg, y = resp_reg, training_frame = train_reg, leaderboard_frame = test_reg,
seed = 42, max_runtime_secs = 60, max_runtime_secs_per_model = 5, verbosity = NULL)
View(aml_reg)
lb_reg <- aml_reg@leaderboard # or h2o.get_leaderboard(object = aml_reg)
names(lb_reg)[2] <- "mrd" # Rename mean_residual_deviance to shorten output
print(lb_reg[, -6], n = nrow(lb_reg)) # Exclude final column to fit the table in one page
data5k=read.csv(file = "computers5k.csv",header = T)
data5k$id = NULL
data5k$cd %<>% mapvalues(from = c("yes","no"), to = c("1","0"))  %>% as.factor()
data5k$laptop %<>% mapvalues(from = c("yes","no"), to = c("1","0")) %>% as.factor()
summary(data5k)
#kmeans only work with numeric vectors
data_wo_factors = data5k %>% dplyr::select(c(-cd,-laptop))
library(plyr)
library(dplyr)
library(factoextra)
library(magrittr)
library(ggplot2)
data5k=read.csv(file = "computers5k.csv",header = T)
data5k$id = NULL
data5k$cd %<>% mapvalues(from = c("yes","no"), to = c("1","0"))  %>% as.factor()
data5k$laptop %<>% mapvalues(from = c("yes","no"), to = c("1","0")) %>% as.factor()
summary(data5k)
#kmeans only work with numeric vectors
data_wo_factors = data5k %>% dplyr::select(c(-cd,-laptop))
setwd("Desktop/Scalable and distributed computing/SDComputing_labs/.git/")
setwd("Desktop/Scalable and distributed computing/SDComputing_labs")
setwd("Desktop/Scalable and distributed computing/SDComputing_labs/")
setwd("~/Desktop/Scalable and distributed computing/SDComputing_labs")
data5k=read.csv(file = "computers5k.csv",header = T)
data5k$id = NULL
data5k$cd %<>% mapvalues(from = c("yes","no"), to = c("1","0"))  %>% as.factor()
data5k$laptop %<>% mapvalues(from = c("yes","no"), to = c("1","0")) %>% as.factor()
summary(data5k)
#kmeans only work with numeric vectors
data_wo_factors = data5k %>% dplyr::select(c(-cd,-laptop))
#Used to generate random numbers
generate_random=function(vector){
return(runif(1,min(vector),max(vector)))
}
rndm_centroids=function(k,data){
X=matrix(nrow=k,ncol=ncol(data)+1)
clusters=letters[1:k]
for (i in 1:nrow(X)) {
for(j in 1:ncol(data)){
X[i,j]=generate_random(data[,j])
}
}
X[,ncol(data)+1]=as.factor(letters[1:k])
#X = data.frame(X, stringsAsFactors = FALSE)
#Now we have one centroid for each column on X
return(X)
}
euclidian=function(a,b){
sqrt(sum((a-b)^2))
}
compute_distances=function(X,data){
x=c()
data$error=NULL
data$cluster=NULL
for (i in 1:nrow(data)) {
for(j in 1:nrow(X)){
x[j]=euclidian(X[j,-8],data[i,1:7])
}
data$error[i]<-min(x)
data$cluster[i]<-which(x==min(x))
}
print(head(data))
assign("data_wf_scaled",data,.GlobalEnv)
}
recode_clusters=function(data){
centroids= data %>% group_by(cluster) %>%
summarize(price=mean(price),
speed=mean(speed),
hd=mean(hd),
ram=mean(ram),
screen=mean(screen),
cores=mean(cores),
trend=mean(trend)) %>%
mutate(n_centroide=cluster) %>%
select(-cluster) %>%
ungroup() %>% as.data.frame(.)
}
X=rndm_centroids(3,data_wf_scaled)
data_wf_scaled=scale(data_wo_factors)
X=rndm_centroids(3,data_wf_scaled)
X
error=c(0,sum(new_data$error))
i=2
while(round(error[i],2)!= round(error[i-1],2)){
compute_distances(X,as.data.frame(data_wf_scaled))
error=c(error,sum(data_wf_scaled$error))
X=recode_clusters(data_wf_scaled)
i=i+1
}
compute_distances(X,data_wf_scaled)
compute_distances(X,as.data.frame(data_wf_scaled))
error=c(0,sum(new_data$error))
i=2
while(round(error[i],2)!= round(error[i-1],2)){
compute_distances(X,as.data.frame(data_wf_scaled))
error=c(error,sum(data_wf_scaled$error))
X=recode_clusters(data_wf_scaled)
i=i+1
}
ggplot(data_wf_scaled,aes(x=hd,y=speed,color=as.factor(cluster))) + geom_point()
error=c(0,sum(new_data$error))
error=c(0,sum(data_wf_scaled$error))
i=2
while(round(error[i],2)!= round(error[i-1],2)){
compute_distances(X,as.data.frame(data_wf_scaled))
error=c(error,sum(data_wf_scaled$error))
X=recode_clusters(data_wf_scaled)
i=i+1
}
ggplot(data_wf_scaled,aes(x=hd,y=speed,color=as.factor(cluster))) + geom_point()
ggplot(data_wf_scaled,aes(x=ram,y=speed,color=as.factor(cluster))) + geom_point()
ggplot(data_wf_scaled,aes(x=ram,y=screen,color=as.factor(cluster))) + geom_point()
data5k=read.csv(file = "computers5k.csv",header = T)
data5k$id = NULL
data5k$cd %<>% mapvalues(from = c("yes","no"), to = c("1","0"))  %>% as.factor()
data5k$laptop %<>% mapvalues(from = c("yes","no"), to = c("1","0")) %>% as.factor()
summary(data5k)
#kmeans only work with numeric vectors
data_wo_factors = data5k %>% dplyr::select(c(-cd,-laptop))
data_wf_scaled=scale(data_wo_factors)
X=rndm_centroids(2,data_wf_scaled)
X
compute_distances(X,as.data.frame(data_wf_scaled))
error=c(0,sum(data_wf_scaled$error))
i=2
while(round(error[i],2)!= round(error[i-1],2)){
compute_distances(X,as.data.frame(data_wf_scaled))
error=c(error,sum(data_wf_scaled$error))
X=recode_clusters(data_wf_scaled)
i=i+1
}
ggplot(data_wf_scaled,aes(x=ram,y=screen,color=as.factor(cluster))) + geom_point()
ggplot(data_wf_scaled,aes(x=ram,y=cores,color=as.factor(cluster))) + geom_point()
ggplot(data_wf_scaled,aes(x=ram,y=trend,color=as.factor(cluster))) + geom_point()
ggplot(data_wf_scaled,aes(x=price,y=trend,color=as.factor(cluster))) + geom_point()
ggplot(data_wf_scaled,aes(x=speed,y=trend,color=as.factor(cluster))) + geom_point()
ggplot(data_wf_scaled,aes(x=speed,y=ram,color=as.factor(cluster))) + geom_point()
data(Boton,package = "MASS")
data(Boston,package = "MASS")
library(h2o)
h2o.init() # Start H2O cluster
h2o.no_progress()
splits_reg <- h2o.splitFrame(data = Boston, ratios = 0.8, seed = 42)
train_reg <- splits_reg[[1]]
test_reg <- splits_reg[[2]]
# Split into train (80%) and test (20%)
splits_reg <- h2o.splitFrame(data = Boston, ratios = 0.8, seed = 42)
data_reg <- as.h2o(Boston)
# Data summary -- perhaps too verbose
h2o.describe(data_reg)
# Data head
h2o.head(data_reg)
splits_reg <- h2o.splitFrame(data = Boston, ratios = 0.8, seed = 42)
train_reg <- splits_reg[[1]]
test_reg <- splits_reg[[2]]
splits_reg <- h2o.splitFrame(data = data_reg, ratios = 0.8, seed = 42)
train_reg <- splits_reg[[1]]
test_reg <- splits_reg[[2]]
View(test_reg)
# Identify the names of the response and predictors
resp_reg <- log(1000*"medv")
resp_reg <- "medv"
pred_reg <- setdiff(names(train_reg), resp_reg) #same as writing ~.
aml_reg <- h2o.automl(x = pred_reg, y = log(1000*resp_reg), training_frame = train_reg, leaderboard_frame = test_reg,
seed = 42, max_runtime_secs = 60, max_runtime_secs_per_model = 5, verbosity = NULL)
aml_reg <- h2o.automl(x = ~., y = log(1000*medv), training_frame = train_reg, leaderboard_frame = test_reg,
seed = 42, max_runtime_secs = 60, max_runtime_secs_per_model = 5, verbosity = NULL)
aml_reg <- h2o.automl(x = pred_reg, y =resp_reg, training_frame = train_reg, leaderboard_frame = test_reg,
seed = 42, max_runtime_secs = 60, max_runtime_secs_per_model = 5, verbosity = NULL)
aml_reg
#1st transformation
data_reg
#1st transformation
train_reg[[14]]
#1st transformation
train_reg[[14]] = log(train_reg[[14]]*1000)
#1st transformation
train_reg[[14]] = log(train_reg[[14]]*1000)
train_reg[[14]]
train_reg[[14]]
aml_reg
h2o.show_progress()
aml_reg <- h2o.automl(x = pred_reg, y =resp_reg, training_frame = train_reg, leaderboard_frame = test_reg,
seed = 42, max_runtime_secs = 60, max_runtime_secs_per_model = 5, verbosity = NULL)
data_reg <- as.h2o(Boston)
# Data summary -- perhaps too verbose
h2o.describe(data_reg)
# Data head
h2o.head(data_reg)
# Split into train (80%) and test (20%)
splits_reg <- h2o.splitFrame(data = data_reg, ratios = 0.8, seed = 42)
train_reg <- splits_reg[[1]]
test_reg <- splits_reg[[2]]
# Identify the names of the response and predictors
resp_reg <- "medv"
pred_reg <- setdiff(names(train_reg), resp_reg) #same as writing ~.
aml_reg <- h2o.automl(x = pred_reg, y =resp_reg, training_frame = train_reg, leaderboard_frame = test_reg,
seed = 42, max_runtime_secs = 60, max_runtime_secs_per_model = 5, verbosity = NULL)
aml_reg
getwd()
#2nd Example
df_bck <- read.csv(file = "/Users/ignacioalmodovarcardenas/Downloads//product_backorders.csv")
h2o.init()
df_bck <- as.h2o(df_bck)
# Summarize the dataset
h2o.describe(df_bck)
resp_bck <- "went_on_backorder"
pred_bck <- setdiff(names(df_bck), c(resp_bck, "sku")) # sku is a unique identifier
# Ensure response is a factor
df_bck[, resp_bck] <- as.factor(df_bck[, resp_bck])
# AutoML without test dataset (cross-validation metrics employed and nfold = 5 as default)
aml_bck <- h2o.automl(x = pred_bck, y = resp_bck, training_frame = df_bck,
max_models = 10, seed = 1, verbosity = NULL)
aml_bck
????""
example(readline)
example(readline)
shiny::runApp('~/Desktop/Data tying and reporting/shiny_app')
runApp('~/Desktop/Data tying and reporting/shiny_app')
runApp('~/Desktop/Data tying and reporting/shiny_app')
runApp('~/Desktop/Data tying and reporting/shiny_app')
install.packages("quantmod")
install.packages("broom")
library(quantmod)
library(ggplot2)
library(magrittr)
library(broom)
runApp('~/Desktop/Data tying and reporting/shiny_app')
runApp('~/Desktop/Data tying and reporting/shiny_app')
runApp()
runApp('~/Desktop/Data tying and reporting/shiny_app')
runApp()
runApp('~/Desktop/Data tying and reporting/shiny_app')
runApp()
runApp('~/Desktop/Data tying and reporting/shiny_app')
runApp()
runApp('~/Desktop/Data tying and reporting/shiny_app')
stock=getSymbols("AAPL",src="yahoo",from="2020-02-02",to="2021-02-02")
stock=xts(stock)
stock=getSymbols("AAPL",auto.assign = FALSE,from="2020-02-02",to="2021-02-02")
getSymbols("AAPL",auto.assign = FALSE,from="2020-02-02",to="2021-02-02")
stock=getSymbols("AAPL",auto.assign = FALSE,from="2020-02-02",to="2021-02-02")
View(stock)
getSymbols("AAPL",source=yahoo,from="2020-02-02",to="2021-02-02")
getSymbols("AAPL",source="yahoo",from="2020-02-02",to="2021-02-02")
stock=xts(AAPL)
ggplot(stock, aes(x = index(stock), y = stock[,6])) +
geom_line(color = "darkblue")+
ggtitle("Petrobras prices series") +
xlab("Date") + ylab("Price") +
theme(plot.title = element_text(hjust = 0.5)) +
scale_x_date(date_labels = "%b %y", date_breaks = "6 months")
stock=getSymbols("AAPL",source="yahoo",from="2020-02-02",to="2021-02-02")
stock=xts(stock)
runApp('~/Desktop/Data tying and reporting/shiny_app')
runApp('~/Desktop/Data tying and reporting/shiny_app')
x=runif(10)
y=runif(10)
plot(x,y)
x=runif(10)
y=runif(10)
plot(x,y)
runApp('~/Desktop/Data tying and reporting/shiny_app')
runApp('~/Desktop/Data tying and reporting/shiny_app')
runApp('~/Desktop/Data tying and reporting/shiny_app')
runApp('~/Desktop/Data tying and reporting/shiny_app')
runApp('~/Desktop/Data tying and reporting/shiny_app')
runApp('~/Desktop/Data tying and reporting/shiny_app')
runApp('~/Desktop/Data tying and reporting/shiny_app')
runApp('~/Desktop/Data tying and reporting/shiny_app')
runApp('~/Desktop/Data tying and reporting/shiny_app')
runApp('~/Desktop/Data tying and reporting/shiny_app')
runApp('~/Desktop/Data tying and reporting/shiny_app')
runApp('~/Desktop/Data tying and reporting/shiny_app')
runApp('~/Desktop/Data tying and reporting/shiny_app')
runApp('~/Desktop/Data tying and reporting/shiny_app')
runApp('~/Desktop/Data tying and reporting/shiny_app')
runApp('~/Desktop/Data tying and reporting/shiny_app')
runApp('~/Desktop/Data tying and reporting/shiny_app')
runApp('~/Desktop/Data tying and reporting/shiny_app')
runApp()
runApp('~/Desktop/Data tying and reporting/shiny_app')
runApp('~/Desktop/Data tying and reporting/shiny_app')
runApp('~/Desktop/Data tying and reporting/shiny_app')
runApp('~/Desktop/Data tying and reporting/shiny_app')
runApp('~/Desktop/Data tying and reporting/shiny_app')
runApp()
runApp('~/Desktop/Data tying and reporting/shiny_app')
runApp('~/Desktop/Data tying and reporting/shiny_app')
runApp('~/Desktop/Data tying and reporting/shiny_app')
runApp('~/Desktop/Data tying and reporting/shiny_app')
runApp('~/Desktop/Data tying and reporting/shiny_app')
runApp('~/Desktop/Data tying and reporting/shiny_app')
runApp('~/Desktop/Data tying and reporting/shiny_app')
runApp('~/Desktop/Data tying and reporting/shiny_app')
runApp('~/Desktop/Data tying and reporting/shiny_app')
runApp('~/Desktop/Data tying and reporting/shiny_app')
runApp('~/Desktop/Data tying and reporting/shiny_app')
runApp('~/Desktop/Data tying and reporting/shiny_app')
runApp('~/Desktop/Data tying and reporting/shiny_app')
runApp('~/Desktop/Data tying and reporting/shiny_app')
runApp('~/Desktop/Data tying and reporting/shiny_app')
runApp('~/Desktop/Data tying and reporting/shiny_app')
runApp('~/Desktop/Data tying and reporting/shiny_app')
runApp('~/Desktop/Data tying and reporting/shiny_app')
runApp('~/Desktop/Data tying and reporting/shiny_app')
runApp('~/Desktop/Data tying and reporting/shiny_app')
runApp('~/Desktop/Data tying and reporting/shiny_app')
runApp('~/Desktop/Data tying and reporting/shiny_app')
runApp('~/Desktop/Data tying and reporting/shiny_app')
